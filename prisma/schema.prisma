// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UrlStatus {
  active
  inactive
}

model UrlAccess {
  id          String   @id @default(cuid())
  isAnonymous Boolean
  createdAt   DateTime @default(now())

  url    Url     @relation(fields: [urlId], references: [id], onDelete: Cascade)
  urlId  String
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Url {
  id               String    @id @default(cuid())
  title            String
  description      String?
  originalUrl      String
  shortUrl         String    @unique
  code             String    @unique
  amountOfAccesses Int       @default(0)
  status           UrlStatus @default(active)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  owner     User?       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String?
  urlAccess UrlAccess[]
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  urls              Url[]
  accounts          Account[]
  sessions          Session[]
  authenticator     Authenticator[]
  urlAccess         UrlAccess[]
  VerificationToken VerificationToken[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  userId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
